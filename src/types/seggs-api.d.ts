/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/healthz': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** GetHealthz */
    get: operations['HealthzGetHealthz'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/healthz/db': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** GetDbHealthz */
    get: operations['HealthzDbGetDbHealthz'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/public/auth/google/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get the Google login URL
     * @description Get the URL to login with Google
     */
    get: operations['ApiPublicAuthGoogleLoginGetLoginUrl'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/public/auth/google/login/start': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Redirect to Google login URL */
    get: operations['ApiPublicAuthGoogleLoginStartRedirectToLoginUrl'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/public/auth/google/callback': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Complete the login process and retrieve an api token */
    get: operations['ApiPublicAuthGoogleCallbackGoogleLoginCallback'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/public/drawings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List drawings */
    get: operations['ApiPublicDrawingsListDrawings'];
    put?: never;
    /**
     * Create a drawing
     * @description Creates a drawing returning a token to be used for updates. Store the token in the client side to be able to perform updates.
     */
    post: operations['ApiPublicDrawingsCreateDrawing'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/public/drawings/{drawing_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve a drawing by ID */
    get: operations['ApiPublicDrawingsDrawingIdGetDrawing'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update a drawing
     * @description Updates a drawing using the update auth token given when the drawing was created.
     */
    patch: operations['ApiPublicDrawingsDrawingIdUpdateDrawing'];
    trace?: never;
  };
  '/api/public/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get information about the currently logged in user
     * @description Unauthenticated users will receive null.
     */
    get: operations['ApiPublicMeGetMe'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/staff/drawings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List drawings */
    get: operations['ApiStaffDrawingsListDrawings'];
    put?: never;
    /** Create a drawing */
    post: operations['ApiStaffDrawingsCreateDrawing'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/staff/drawings/{drawing_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Retrieve a drawing by ID */
    get: operations['ApiStaffDrawingsDrawingIdGetDrawing'];
    put?: never;
    post?: never;
    /** Delete a drawing */
    delete: operations['ApiStaffDrawingsDrawingIdDeleteDrawing'];
    options?: never;
    head?: never;
    /** Update a drawing */
    patch: operations['ApiStaffDrawingsDrawingIdUpdateDrawing'];
    trace?: never;
  };
  '/api/staff/me': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get information about the currently logged in user
     * @description Unauthenticated users will receive null.
     */
    get: operations['ApiStaffMeGetMe'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/staff/print-jobs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List print jobs */
    get: operations['ApiStaffPrintJobsListPrintJobs'];
    put?: never;
    /** Create a print job */
    post: operations['ApiStaffPrintJobsCreatePrintJob'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/print-jobs': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List print jobs */
    get: operations['PrintJobsListPrintJobs'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/print-jobs/{print_job_id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * UpdatePrintJob
     * @description Update a print job
     */
    patch: operations['PrintJobsPrintJobIdUpdatePrintJob'];
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** DrawingContent */
    DrawingContent: {
      /**
       * @description The width of the canvas
       * @default 600
       */
      canvas_width: number;
      /**
       * @description The height of the canvas
       * @default 700
       */
      canvas_height: number;
      strokes: components['schemas']['DrawingPathItem'][];
    };
    /** DrawingCreateResponse */
    DrawingCreateResponse: {
      /** Format: uuid */
      id: string;
      plaintext_update_auth_token: string;
    };
    /** DrawingPathItem */
    DrawingPathItem: {
      color: string;
      width: number;
      /** @description The points of the path, each point is a list containing the x and y coordinates in (in the first and second positions respectively) of the point in the canvas */
      path: (number | number)[][];
    };
    /** DrawingReadResponse */
    DrawingReadResponse: {
      /** Format: uuid */
      id: string;
      forked_from_drawing_id?: string | null;
      is_featured: boolean;
      stroke_count: number;
      point_count: number;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      content_updated_at?: string | null;
      deleted_at?: string | null;
      content: components['schemas']['DrawingContent'];
    };
    /** GetLoginUrlResponse */
    GetLoginUrlResponse: {
      url: string;
    };
    /** LoginResponse */
    LoginResponse: {
      access_token: string;
    };
    /** PrintJobCreateInput */
    PrintJobCreateInput: {
      /** Format: uuid */
      drawing_id: string;
    };
    /** PrintJobReadResponse */
    PrintJobReadResponse: {
      /** Format: uuid */
      id: string;
      status: components['schemas']['PrintJobStatus'];
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
    };
    /**
     * PrintJobStatus
     * @enum {string}
     */
    PrintJobStatus: 'pending' | 'completed';
    /** PrintJobUpdateInput */
    PrintJobUpdateInput: {
      status: components['schemas']['PrintJobStatus'];
    };
    /** PublicDrawingCreateInput */
    PublicDrawingCreateInput: {
      content: components['schemas']['DrawingContent'];
      forked_from_drawing_id?: string | null;
    };
    /** PublicDrawingUpdateInput */
    PublicDrawingUpdateInput: {
      content: components['schemas']['DrawingContent'];
    };
    /**
     * Role
     * @enum {string}
     */
    Role: 'staff' | 'public' | 'printer';
    /** StaffDrawingCreateInput */
    StaffDrawingCreateInput: {
      content: components['schemas']['DrawingContent'];
      /** Format: uuid */
      id: string;
      /** Format: date-time */
      created_at: string;
      /** Format: date-time */
      updated_at: string;
      /** Format: date-time */
      content_updated_at: string;
    };
    /** StaffDrawingUpdateInput */
    StaffDrawingUpdateInput: {
      is_featured: boolean;
    };
    /** User */
    User: {
      email: string;
      role: components['schemas']['Role'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  HealthzGetHealthz: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': string;
        };
      };
    };
  };
  HealthzDbGetDbHealthz: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': string;
        };
      };
    };
  };
  ApiPublicAuthGoogleLoginGetLoginUrl: {
    parameters: {
      query?: {
        /** @description Optional URI to redirect to after login.This parameter is used to specify where the user should be redirectedafter successfully logging in with Google. If not provided, a defaultredirect URI will be used. */
        redirect_uri?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetLoginUrlResponse'];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiPublicAuthGoogleLoginStartRedirectToLoginUrl: {
    parameters: {
      query?: {
        /** @description Optional URI to redirect to after login.This parameter is used to specify where the user should be redirectedafter successfully logging in with Google. If not provided, a defaultredirect URI will be used. */
        redirect_uri?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Redirect Response */
      200: {
        headers: {
          /** @description target path for the redirect */
          location?: string;
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiPublicAuthGoogleCallbackGoogleLoginCallback: {
    parameters: {
      query: {
        code: string;
        /** @description Optional URI to redirect to after login.This parameter is used to specify where the user should be redirectedafter successfully logging in with Google. If not provided, a defaultredirect URI will be used. */
        redirect_uri?: string | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['LoginResponse'];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiPublicDrawingsListDrawings: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            items?: components['schemas']['DrawingReadResponse'][];
            /** @description Maximal number of items to send. */
            limit?: number;
            /** @description Offset from the beginning of the query. */
            offset?: number;
            /** @description Total number of items. */
            total?: number;
          };
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiPublicDrawingsCreateDrawing: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicDrawingCreateInput'];
      };
    };
    responses: {
      /** @description Document created, URL follows */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DrawingCreateResponse'];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiPublicDrawingsDrawingIdGetDrawing: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        drawing_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DrawingReadResponse'];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiPublicDrawingsDrawingIdUpdateDrawing: {
    parameters: {
      query?: never;
      header: {
        'X-Drawing-Update-Auth-Token': string;
      };
      path: {
        drawing_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PublicDrawingUpdateInput'];
      };
    };
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiPublicMeGetMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'] | null;
        };
      };
    };
  };
  ApiStaffDrawingsListDrawings: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            items?: components['schemas']['DrawingReadResponse'][];
            /** @description Maximal number of items to send. */
            limit?: number;
            /** @description Offset from the beginning of the query. */
            offset?: number;
            /** @description Total number of items. */
            total?: number;
          };
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiStaffDrawingsCreateDrawing: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StaffDrawingCreateInput'];
      };
    };
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiStaffDrawingsDrawingIdGetDrawing: {
    parameters: {
      query: {
        id: string;
      };
      header?: never;
      path: {
        drawing_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['DrawingReadResponse'];
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiStaffDrawingsDrawingIdDeleteDrawing: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        drawing_id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiStaffDrawingsDrawingIdUpdateDrawing: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        drawing_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['StaffDrawingUpdateInput'];
      };
    };
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiStaffMeGetMe: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['User'] | null;
        };
      };
    };
  };
  ApiStaffPrintJobsListPrintJobs: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
        status?: components['schemas']['PrintJobStatus'] | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            items?: components['schemas']['PrintJobReadResponse'][];
            /** @description Maximal number of items to send. */
            limit?: number;
            /** @description Offset from the beginning of the query. */
            offset?: number;
            /** @description Total number of items. */
            total?: number;
          };
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  ApiStaffPrintJobsCreatePrintJob: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PrintJobCreateInput'];
      };
    };
    responses: {
      /** @description Document created, URL follows */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': string;
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PrintJobsListPrintJobs: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
        status?: components['schemas']['PrintJobStatus'] | null;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Request fulfilled, document follows */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            items?: components['schemas']['PrintJobReadResponse'][];
            /** @description Maximal number of items to send. */
            limit?: number;
            /** @description Offset from the beginning of the query. */
            offset?: number;
            /** @description Total number of items. */
            total?: number;
          };
        };
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
  PrintJobsPrintJobIdUpdatePrintJob: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        print_job_id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['PrintJobUpdateInput'];
      };
    };
    responses: {
      /** @description Request fulfilled, nothing follows */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request syntax or unsupported method */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            status_code: number;
            detail: string;
            extra?:
              | null
              | {
                  [key: string]: unknown;
                }
              | unknown[];
          };
        };
      };
    };
  };
}
